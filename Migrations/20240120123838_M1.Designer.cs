// <auto-generated />
using System;
using AcademyEFCore_NET7.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademyEFCore_NET7.Migrations
{
    [DbContext(typeof(ApplicationDB))]
    [Migration("20240120123838_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Address", b =>
                {
                    b.Property<int>("AID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AID"));

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SID")
                        .HasColumnType("int");

                    b.Property<int>("StudentSID")
                        .HasColumnType("int");

                    b.HasKey("AID");

                    b.HasIndex("StudentSID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Course", b =>
                {
                    b.Property<int>("CID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CID"));

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Presentation", b =>
                {
                    b.Property<int>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PID"));

                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TID")
                        .HasColumnType("int");

                    b.HasKey("PID");

                    b.HasIndex("CID");

                    b.HasIndex("TID");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Register", b =>
                {
                    b.Property<int>("RID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RID"));

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("SID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("RID");

                    b.HasIndex("PID");

                    b.HasIndex("SID");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Student", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentCode")
                        .HasColumnType("int");

                    b.HasKey("SID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Teacher", b =>
                {
                    b.Property<int>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Address", b =>
                {
                    b.HasOne("AcademyEFCore_NET7.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Presentation", b =>
                {
                    b.HasOne("AcademyEFCore_NET7.Models.Course", "Course")
                        .WithMany("Presentations")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyEFCore_NET7.Models.Teacher", "Teacher")
                        .WithMany("Presentations")
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Register", b =>
                {
                    b.HasOne("AcademyEFCore_NET7.Models.Presentation", "Presentation")
                        .WithMany("Registers")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyEFCore_NET7.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("SID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presentation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Course", b =>
                {
                    b.Navigation("Presentations");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Presentation", b =>
                {
                    b.Navigation("Registers");
                });

            modelBuilder.Entity("AcademyEFCore_NET7.Models.Teacher", b =>
                {
                    b.Navigation("Presentations");
                });
#pragma warning restore 612, 618
        }
    }
}
